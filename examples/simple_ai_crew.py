"""
Simple AI Content Creation Demo
A lightweight demonstration of AI content creation without complex dependencies.

This example demonstrates:
- Auto-detection of functions as API endpoints
- Multiple API methods (GET/POST)
- Realistic AI content creation workflow
- Environment variable handling
"""

import os
import json
import uuid
from datetime import datetime
from typing import Dict, Any, Optional, List
from dataclasses import dataclass, asdict

# Load environment variables from .env file
try:
    from dotenv import load_dotenv
    load_dotenv()
    print("✅ Environment variables loaded from .env file")
except ImportError:
    print("⚠️  python-dotenv not installed, using system environment variables")
except Exception as e:
    print(f"⚠️  Failed to load .env file: {e}")

@dataclass
class ContentRequest:
    """Represents a content creation request"""
    topic: str
    content_type: str = "blog_post"
    target_audience: str = "general"
    tone: str = "professional"
    word_count: int = 800
    keywords: List[str] = None
    request_id: str = None
    
    def __post_init__(self):
        if self.request_id is None:
            self.request_id = str(uuid.uuid4())
        if self.keywords is None:
            self.keywords = []

# Mock AI Agent Classes for demo
class MockAgent:
    def __init__(self, role, goal, backstory):
        self.role = role
        self.goal = goal
        self.backstory = backstory

class MockTask:
    def __init__(self, description, agent, expected_output):
        self.description = description
        self.agent = agent
        self.expected_output = expected_output
        self.output = MockOutput(description)

class MockOutput:
    def __init__(self, content):
        self.raw = f"Mock {content[:50]}... [Generated by {self.__class__.__name__}]"

class MockCrew:
    def __init__(self, agents, tasks):
        self.agents = agents
        self.tasks = tasks
    
    def kickoff(self):
        return "Mock crew execution completed successfully"

class SimpleAIContentCrew:
    """Simplified AI Content Creation System using mock agents"""
    
    def __init__(self):
        self.setup_agents()
    
    def setup_agents(self):
        """Set up mock AI agents"""
        self.researcher = MockAgent(
            role='Content Researcher',
            goal='Research comprehensive information about topics',
            backstory='Expert researcher with access to the latest information'
        )
        
        self.writer = MockAgent(
            role='Content Writer',
            goal='Create engaging, well-structured content',
            backstory='Skilled writer with years of experience in content creation'
        )
        
        self.editor = MockAgent(
            role='Content Editor',
            goal='Review and enhance content quality',
            backstory='Meticulous editor focused on clarity and engagement'
        )
        
        self.seo_specialist = MockAgent(
            role='SEO Specialist',
            goal='Optimize content for search engines',
            backstory='SEO expert with deep knowledge of search algorithms'
        )
    
    def create_content(self, request: ContentRequest) -> Dict[str, Any]:
        """Execute content creation workflow with mock agents"""
        
        # Create mock tasks
        research_task = MockTask(
            f"Research {request.topic} for {request.content_type}",
            self.researcher,
            "Comprehensive research findings"
        )
        
        writing_task = MockTask(
            f"Write {request.content_type} about {request.topic}",
            self.writer,
            f"Complete {request.content_type} content"
        )
        
        editing_task = MockTask(
            f"Edit and improve the {request.content_type}",
            self.editor,
            "Polished, edited content"
        )
        
        seo_task = MockTask(
            f"SEO optimize the {request.content_type}",
            self.seo_specialist,
            "SEO-optimized content with recommendations"
        )
        
        # Execute mock crew
        crew = MockCrew(
            agents=[self.researcher, self.writer, self.editor, self.seo_specialist],
            tasks=[research_task, writing_task, editing_task, seo_task]
        )
        
        result = crew.kickoff()
        
        return {
            "request_id": request.request_id,
            "topic": request.topic,
            "research_summary": research_task.output.raw,
            "draft_content": writing_task.output.raw,
            "edited_content": editing_task.output.raw,
            "seo_optimized_content": seo_task.output.raw,
            "seo_recommendations": "Mock SEO recommendations: optimize titles, use keywords naturally, improve meta descriptions",
            "metadata": asdict(request),
            "created_at": datetime.now().isoformat(),
            "status": "completed",
            "crew_result": str(result)
        }

# Global crew instance
content_crew = SimpleAIContentCrew()

# Web API Functions (Auto-detected endpoints)

def health_check() -> Dict[str, Any]:
    """
    Health check endpoint for the AI content creation service.
    
    Returns:
        Dict with service status and information
    """
    return {
        "status": "healthy",
        "service": "Simple AI Content Creation Demo",
        "version": "1.0.0",
        "timestamp": datetime.now().isoformat(),
        "endpoints_available": 8
    }

def get_environment_status() -> Dict[str, Any]:
    """
    Get the status of environment variables and API keys.
    
    Returns:
        Dict with environment status and available services
    """
    api_keys = {
        'OPENAI_API_KEY': bool(os.getenv('OPENAI_API_KEY')),
        'ANTHROPIC_API_KEY': bool(os.getenv('ANTHROPIC_API_KEY')),
        'GROQ_API_KEY': bool(os.getenv('GROQ_API_KEY')),
        'GOOGLE_API_KEY': bool(os.getenv('GOOGLE_API_KEY')),
        'SERPER_API_KEY': bool(os.getenv('SERPER_API_KEY'))
    }
    
    available_keys = sum(api_keys.values())
    
    return {
        "success": True,
        "environment_loaded": True,
        "api_keys_status": api_keys,
        "available_services": available_keys,
        "total_possible_services": len(api_keys),
        "status": "demo_mode" if available_keys == 0 else "production",
        "note": "This is a simplified demo version without real AI dependencies"
    }

def get_crew_info() -> Dict[str, Any]:
    """
    Get information about the AI Content Creation Crew.
    
    Returns:
        Dict with crew information and capabilities
    """
    return {
        "success": True,
        "crew_name": "Simple AI Content Creation Demo",
        "description": "Lightweight demo of AI content creation workflow",
        "agents": [
            {
                "role": "Content Researcher",
                "description": "Researches topics and gathers information",
                "status": "active"
            },
            {
                "role": "Content Writer", 
                "description": "Creates engaging content",
                "status": "active"
            },
            {
                "role": "Content Editor",
                "description": "Reviews and enhances content",
                "status": "active"
            },
            {
                "role": "SEO Specialist",
                "description": "Optimizes content for search engines",
                "status": "active"
            }
        ],
        "supported_content_types": ["blog_post", "article", "social_media", "email"],
        "supported_tones": ["professional", "casual", "technical", "creative"],
        "note": "Demo version - uses mock agents for demonstration"
    }

def get_content_types() -> Dict[str, Any]:
    """
    Get available content types and their descriptions.
    
    Returns:
        Dict with supported content types
    """
    content_types = {
        "blog_post": {
            "name": "Blog Post",
            "description": "Engaging blog articles",
            "typical_length": "800-1200 words"
        },
        "article": {
            "name": "Article",
            "description": "In-depth articles",
            "typical_length": "1000-2000 words"
        },
        "social_media": {
            "name": "Social Media Post",
            "description": "Short-form social content",
            "typical_length": "50-300 words"
        },
        "email": {
            "name": "Email Content",
            "description": "Email newsletters and marketing",
            "typical_length": "300-800 words"
        }
    }
    
    return {
        "success": True,
        "content_types": content_types,
        "total_types": len(content_types)
    }

def create_content_request(topic: str, content_type: str = "blog_post", 
                          target_audience: str = "general", tone: str = "professional",
                          word_count: int = 800, keywords: List[str] = None) -> Dict[str, Any]:
    """
    Create a new content creation request and execute the workflow.
    
    Args:
        topic: The main topic for the content
        content_type: Type of content to create
        target_audience: Target audience
        tone: Writing tone
        word_count: Desired word count
        keywords: List of target keywords
    
    Returns:
        Dict with the complete content creation result
    """
    try:
        request = ContentRequest(
            topic=topic,
            content_type=content_type,
            target_audience=target_audience,
            tone=tone,
            word_count=word_count,
            keywords=keywords or []
        )
        
        result = content_crew.create_content(request)
        
        return {
            "success": True,
            "message": "Content created successfully",
            **result
        }
        
    except Exception as e:
        return {
            "success": False,
            "error": str(e),
            "message": "Content creation failed"
        }

def get_content_status(request_id: str) -> Dict[str, Any]:
    """
    Get the status of a content creation request.
    
    Args:
        request_id: The unique request identifier
        
    Returns:
        Dict with request status
    """
    return {
        "success": True,
        "request_id": request_id,
        "status": "completed",
        "message": "Content creation completed",
        "stages": {
            "research": "completed", 
            "writing": "completed",
            "editing": "completed",
            "seo_optimization": "completed"
        },
        "completion_time": "30 seconds (mock)",
        "last_updated": datetime.now().isoformat()
    }

def create_quick_content(topic: str, content_type: str = "blog_post") -> Dict[str, Any]:
    """
    Create content quickly with default settings.
    
    Args:
        topic: The main topic for the content
        content_type: Type of content to create
        
    Returns:
        Dict with the created content
    """
    try:
        request = ContentRequest(
            topic=topic,
            content_type=content_type,
            target_audience="general",
            tone="professional", 
            word_count=600,
            keywords=[]
        )
        
        result = content_crew.create_content(request)
        
        return {
            "success": True,
            "topic": topic,
            "content_type": content_type,
            "content": result["seo_optimized_content"],
            "quick_mode": True,
            "created_at": result["created_at"],
            "request_id": result["request_id"]
        }
        
    except Exception as e:
        return {
            "success": False,
            "error": str(e),
            "message": "Quick content creation failed"
        }

def get_demo_info() -> Dict[str, Any]:
    """
    Get information about this demo deployment.
    
    Returns:
        Dict with demo information and next steps
    """
    return {
        "success": True,
        "demo_name": "Simple AI Content Creation Demo",
        "description": "Lightweight demonstration of getmethatdawg auto-detection",
        "features": [
            "Auto-detected API endpoints",
            "Multiple HTTP methods (GET/POST)",
            "Mock AI agent workflow",
            "Environment variable handling",
            "Realistic API responses"
        ],
        "endpoints_detected": 8,
        "deployment_method": "getmethatdawg --auto-detect",
        "next_steps": [
            "Add real AI API keys to .env file",
            "Replace mock agents with real CrewAI implementation",
            "Customize content types and workflows",
            "Add authentication and rate limiting"
        ],
        "github": "https://github.com/dwij1704/getmethatdawg",
        "note": "This demo shows how getmethatdawg can instantly deploy any Python file as a web API"
    } 